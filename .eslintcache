[{"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\index.js":"1","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\App.js":"2","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reportWebVitals.js":"3","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Root.js":"4","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\Navbar.js":"5","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\connections.js":"6","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\statistics.js":"7","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\index.js":"8","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\search.js":"9","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\HomeChar.js":"10","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\navigationBar.js":"11","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\homePageAlgo.js":"12","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\ConnectionsReducer.js":"13","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\hardesNumbers.js":"14","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\makeGraph.js":"15","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\actions\\index.js":"16"},{"size":522,"mtime":1609750961413,"results":"17","hashOfConfig":"18"},{"size":368,"mtime":1609781232773,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":437,"mtime":1609750961412,"results":"21","hashOfConfig":"18"},{"size":651,"mtime":1609842615025,"results":"22","hashOfConfig":"18"},{"size":1747,"mtime":1609842879411,"results":"23","hashOfConfig":"18"},{"size":7189,"mtime":1609842549023,"results":"24","hashOfConfig":"18"},{"size":174,"mtime":1609750961416,"results":"25","hashOfConfig":"18"},{"size":6395,"mtime":1609856839917,"results":"26","hashOfConfig":"18"},{"size":4564,"mtime":1609857193867,"results":"27","hashOfConfig":"18"},{"size":1643,"mtime":1609842637199,"results":"28","hashOfConfig":"18"},{"size":506,"mtime":1609759152819,"results":"29","hashOfConfig":"18"},{"size":492,"mtime":1609750961416,"results":"30","hashOfConfig":"18"},{"size":68,"mtime":1609152645738,"results":"31","hashOfConfig":"18"},{"size":593,"mtime":1609750961411,"results":"32","hashOfConfig":"18"},{"size":613,"mtime":1609750961413,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1luwyyv",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\index.js",[],["76","77"],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\App.js",["78"],"import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport backgroundImage from './components/background.jpg';\nfunction App() {\n  return (\n    <div >\n    <BrowserRouter >\n    \n      <div className='start'  >\n       <Navbar />   \n      </div>\n    </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reportWebVitals.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Root.js",["79"],"import React from 'react';\r\nimport reduxThunk from 'redux-thunk';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport reducers from './reducers'\r\n\r\nexport default ({ children, initialState = {} }) => {\r\n    const createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\r\n\r\n    return <Provider store={createStoreWithMiddleware(reducers, initialState)}>{children}</Provider>\r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\Navbar.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\connections.js",["80","81","82"],"import {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import SimpleBottomNavigation from '../components/navigationBar'\r\n  // import hardesNumbers from '../jsons/hardesNumbers'\r\n  import Box from '@material-ui/core/Box';\r\n  import { typography } from '@material-ui/system';\r\n  import backgroundImage from '../components/background.jpg';\r\n\r\n  \r\n  var numbersCount = [0,0,0,0,0];\r\n  \r\n  \r\n  \r\n  const data = [\r\n    {\r\n      name: '1', uv: numbersCount[1]\r\n    },\r\n    {\r\n      name: '2', uv: numbersCount[2]\r\n    },\r\n    {\r\n      name: '3', uv: numbersCount[3]\r\n    },\r\n    {\r\n      name: '4', uv: numbersCount[4]\r\n    }\r\n  ];\r\n  const search = () =>\r\n  {\r\n    \r\n    return (\r\n      <div className=\"App\" >\r\n          <SimpleBottomNavigation  />\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '50%',\r\n              transform: 'translate(-50%, -50%)',\r\n\r\n          }}>\r\n        \r\n            <header className=\"Chart\">\r\n                <LineChart\r\n                    width={1000}\r\n                    height={500}\r\n                    data={data}\r\n                    margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\"  />\r\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n                </header>\r\n          </div>  \r\n     </div>\r\n    );\r\n  }\r\n  \r\n  export default search;","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\statistics.js",["83","84","85","86","87","88","89","90","91","92","93","94"],"  import SimpleBottomNavigation from '../components/navigationBar'\r\n  import React, { useState, useEffect } from 'react'\r\n  import Graph from \"react-graph-vis\";\r\n  import MakeGraph from '../Algorithms/makeGraph';  \r\n  import { CommonLoading } from 'react-loadingg';\r\n  import backgroundImage from '../components/background.jpg';\r\n  import {connect} from 'react-redux';\r\n  import TextField from '@material-ui/core/TextField';\r\n  import Autocomplete from '@material-ui/lab/Autocomplete';\r\n  import SendIcon from '@material-ui/icons/Send'; \r\n  import Button from '@material-ui/core/Button'; \r\n\r\n  const EmptyGraph = {nodes: [],  edges: []};\r\n  const Statistics = ({connections}) =>{\r\n    const events = {\r\n      select: function(event) {\r\n        var { nodes, edges } = event;\r\n      }\r\n    };\r\n    \r\n  const options = {\r\n    layout: {\r\n      improvedLayout: true\r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n    width: \"1000px\"\r\n  };\r\n  const changeVal = (change, value) => {\r\n    if (change === \"start\")\r\n      setStart(value);\r\n    else\r\n      setFinish(value);\r\n  }\r\n\r\n  const changeNUmberOfPaths = (num) =>{\r\n    setNumOfpaths(num);\r\n  } \r\n\r\n  const convert = (paths) => {\r\n    var nodesList = [];\r\n    var nodes = [];\r\n    var edges = [];\r\n    var i = 0;    \r\n    for(var path in paths){\r\n      for (var node in paths[path][\"edges\"]){\r\n        var edge = paths[path][\"edges\"][node]\r\n        var autFrom = false\r\n        var autTo = false\r\n        for (var v in nodesList){\r\n          if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n            autFrom = true\r\n          if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n            autTo = true\r\n        }\r\n        if (!autFrom){\r\n              var node =  edge[\"fromNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n          \r\n              if(edge[\"fromNode\"] === start){\r\n                nodes.push({id: i, label: edge[\"fromNode\"], color:{background:'#8096E3'}});\r\n              }\r\n              else{\r\n                nodes.push({id: i, label: edge[\"fromNode\"]});\r\n              }\r\n              i++\r\n        }\r\n        if (!autTo){\r\n              var node =  edge[\"toNode\"]\r\n            \r\n                nodesList.push( {name: node, id : i} )\r\n                if(edge[\"toNode\"] === finish){\r\n                  nodes.push({id: i, label: edge[\"toNode\"], color:{background:'#9BDCDC'}});\r\n  \r\n                }\r\n                else{\r\n                  nodes.push({id: i, label: edge[\"toNode\"]});\r\n                }\r\n              i++\r\n        }\r\n        for ( var nodeinNodes in nodesList){\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n            var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n            var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n        }      \r\n  \r\n        edges.push({from: edgeFrom, to: edgeTo});\r\n       \r\n      }\r\n    }\r\n    return {\r\n      nodes: nodes,\r\n      edges: edges\r\n    }\r\n  }\r\nconst [start, setStart] = useState(\"\");\r\nconst [finish, setFinish] = useState(\"\");\r\nconst [numOfPaths,setNumOfpaths] = useState(1);\r\nconst [isSubmmited ,setIsSubmmited] = useState(false)\r\nconst [loading ,setLoading] = useState(false)\r\nconst [graph, setGraph] = useState(EmptyGraph)\r\n\r\n\r\n\r\nconst lower_upper_case = (str) => {\r\n  console.log(str);\r\n   var words = str.split(\" \");\r\n   var ans = \"\"\r\n   for(var word in words){\r\n    ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n   }\r\n   ans = ans.substring(0, ans.length-1)\r\n  return ans;\r\n}\r\n\r\nconst valid_input = (name) =>{\r\n  for(var v in connections.rawData){\r\n    if(name === v){\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nconst getNames = (data) => {\r\n  var val = [];\r\n  for(var v in data){\r\n    val.push(v)\r\n  }\r\n  return val\r\n}\r\n\r\nuseEffect ( async () => {\r\n  console.log(isSubmmited);\r\n  console.log(graph)\r\n  if (graph === EmptyGraph)\r\n    setIsSubmmited(false);\r\n  else {\r\n    setIsSubmmited(true);\r\n    setLoading(false)\r\n  }\r\n  console.log(isSubmmited);\r\n},[graph]);\r\n\r\n\r\nconst optionss = getNames(connections.rawData);\r\n\r\n  const handleSubmit = async  (e, graph) => {\r\n    setLoading(true); \r\n    setGraph(EmptyGraph)\r\n    e.preventDefault();\r\n    const ksp = require('k-shortest-path')\r\n    var name1 =  lower_upper_case(start);\r\n    var name2 =  lower_upper_case(finish);\r\n    if (!valid_input(name1)){\r\n      alert(\"the name: \" + name1 + \" wasn't found\")\r\n      return;\r\n    }\r\n    if(!valid_input(name2)){\r\n     alert(\"the name: \" + name2 + \" wasn't found\")\r\n     return;\r\n    }\r\n    setTimeout(()=> {\r\n      var path = ksp.ksp(graph, name1, name2, numOfPaths)\r\n      var changed_graph = convert(path);\r\n      setGraph(changed_graph);\r\n    },500)\r\n    \r\n\r\n  } \r\n\r\n return (\r\n    \r\n    <div className=\"search\"  >\r\n          <SimpleBottomNavigation  />\r\n          {loading && <CommonLoading />}\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '48%',\r\n              transform: 'translate(-50%, -50%)',\r\n          }}>\r\n\r\n              { isSubmmited && <Graph\r\n                graph={graph}\r\n                options={options}\r\n                events={events}/>}\r\n\r\n          </div> \r\n                \r\n      \r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '92%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={optionss}\r\n            getOptionLabel={(option) => option}\r\n            style={{ width: 300 }}\r\n            onChange={(e, value) => {changeVal(\"start\",value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author from\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n           <Autocomplete\r\n            id=\"combo-box-demo1\"\r\n            options={optionss}\r\n            getOptionLabel={(option) => option}\r\n            style={{ width: 300 }}\r\n            onChange={(e,value) => changeVal(\"finish\",value)}\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author to\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          *it takes ~15 seconds to find one path\r\n          <br />\r\n            <Autocomplete\r\n            id=\"combo-box-demo2\"\r\n            options={[1,2,3,4,5,6,7,8]}\r\n            getOptionLabel={(option) => option.toString()}\r\n            style={{ width: 300, marginTop: '2%' }}\r\n            onChange={(e, value) => {changeNUmberOfPaths(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"number of paths\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          <form onSubmit={(e) => handleSubmit(e, connections.processed_data)}  >\r\n                <Button \r\n                   type=\"submit\" value=\"Submit\" variant=\"outlined\"\r\n                icon={<SendIcon/>} >submit\r\n                 </Button>\r\n            </form>\r\n         \r\n            </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {connections: state.connections}\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Statistics);","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\index.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\search.js",["95","96","97","98","99","100","101","102","103","104"],"import React, { useState, useEffect } from 'react'\r\nimport SimpleBottomNavigation from '../components/navigationBar'\r\nimport Graph from \"react-graph-vis\";\r\nimport {connect} from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SendIcon from '@material-ui/icons/Send'; \r\nimport Button from '@material-ui/core/Button'; \r\nimport { CommonLoading } from 'react-loadingg';\r\n\r\nconst EmptyGraph = {nodes: [],  edges: []};\r\n\r\nconst Search = ({connections}) =>{\r\n  const events = {\r\n    setSelect: function(event) {\r\n      var { nodes, edges } = event;\r\n    }\r\n    \r\n    \r\n  };\r\n  \r\n  const options = {\r\n    layout: {\r\n      improvedLayout: true\r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n    width: \"1000px\"\r\n  };\r\n  const changeVal = (value) => {\r\n     setValue(value);\r\n  }\r\n  const changeNUmberOfPaths = (num) =>{\r\n    setNumOfpaths(num);\r\n  } \r\n\r\n  const convert = (paths) => {\r\n    var nodesList = [];\r\n    var nodes = [];\r\n    var edges = [];\r\n    var i = 0;    \r\n    for(var path in paths){\r\n      for (var node in paths[path][\"edges\"]){\r\n        var edge = paths[path][\"edges\"][node]\r\n        var autFrom = false\r\n        var autTo = false\r\n        for (var v in nodesList){\r\n          if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n            autFrom = true\r\n          if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n            autTo = true\r\n        }\r\n        if (!autFrom){\r\n              var node =  edge[\"fromNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n          \r\n              if(edge[\"fromNode\"] === \"Paul Erd\\u00f6s\"){\r\n                nodes.push({id: i, label: edge[\"fromNode\"], color:{background:'#8096E3'}});\r\n              }\r\n              else{\r\n                nodes.push({id: i, label: edge[\"fromNode\"]});\r\n              }\r\n              i++\r\n        }\r\n        if (!autTo){\r\n              var node =  edge[\"toNode\"]\r\n            \r\n                nodesList.push( {name: node, id : i} )\r\n                if(edge[\"toNode\"] === value){\r\n                  nodes.push({id: i, label: edge[\"toNode\"], color:{background:'#9BDCDC'}});\r\n  \r\n                }\r\n                else{\r\n                  nodes.push({id: i, label: edge[\"toNode\"]});\r\n                }\r\n              i++\r\n        }\r\n        for ( var nodeinNodes in nodesList){\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n            var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n            var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n        }      \r\n  \r\n        edges.push({from: edgeFrom, to: edgeTo});\r\n       \r\n      }\r\n    }\r\n    return {\r\n      nodes: nodes,\r\n      edges: edges\r\n    }\r\n  }\r\n\r\nconst [value, setValue] = useState(\"\");\r\nconst [numOfPaths,setNumOfpaths] = useState(1);\r\nconst [isSubmmited ,setIsSubmmited] = useState(false)\r\nconst [loading ,setLoading] = useState(false)\r\nconst [graph, setGraph] = useState(EmptyGraph)\r\n\r\n\r\n\r\nconst lower_upper_case = (str) => {\r\n   var words = str.split(\" \");\r\n   var ans = \"\"\r\n   for(var word in words){\r\n    ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n   }\r\n   ans = ans.substring(0, ans.length-1)\r\n  return ans;\r\n}\r\nconst valid_input = (name) =>{\r\n  for(var v in connections.rawData){\r\n    if(name === v){\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nconst getNames = (data) => {\r\n  var val = [];\r\n  for(var v in data){\r\n    val.push(v)\r\n  }\r\n  return val\r\n}\r\n\r\nuseEffect ( async () => {\r\n  console.log(isSubmmited);\r\n  console.log(graph)\r\n  if (graph === EmptyGraph)\r\n    setIsSubmmited(false);\r\n  else {\r\n    setIsSubmmited(true);\r\n    setLoading(false)\r\n  }\r\n  console.log(isSubmmited);\r\n},[graph]);\r\n\r\n\r\nconst optionss = getNames(connections.rawData);\r\n\r\n  const handleSubmit = async  (e, graph) => {\r\n    setLoading(true); \r\n    setGraph(EmptyGraph)\r\n    e.preventDefault();\r\n    const ksp = require('k-shortest-path')\r\n    var name =  lower_upper_case(value);\r\n    if (!valid_input(name)){\r\n     alert(\"the name: \" + name + \" wasn't found\")\r\n     return;\r\n    }\r\n    setTimeout(()=> {\r\n      var path = ksp.ksp(graph, \"Paul Erd\\u00f6s\", lower_upper_case(value), numOfPaths)\r\n      var changed_graph = convert(path);\r\n      setGraph(changed_graph);\r\n    },500)\r\n    \r\n\r\n  } \r\n\r\n return (\r\n    \r\n    <div className=\"search\"  >\r\n          <SimpleBottomNavigation  />\r\n          {loading && <CommonLoading />}\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '48%',\r\n              transform: 'translate(-50%, -50%)',\r\n          }}>\r\n\r\n              { isSubmmited && <Graph\r\n                graph={graph}\r\n                options={options}\r\n                events={events}/>}\r\n\r\n          </div> \r\n                \r\n      \r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '92%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={optionss}\r\n            getOptionLabel={(option) => option}\r\n            style={{ width: 300 }}\r\n            onChange={(e, value) => {changeVal(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author name\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          *it takes ~15 seconds to find one path\r\n          <br />\r\n            <Autocomplete\r\n            id=\"combo-box-demo2\"\r\n            options={[1,2,3,4,5,6,7,8]}\r\n            getOptionLabel={(option) => option.toString()}\r\n            style={{ width: 300, marginTop: '2%' }}\r\n            onChange={(e, value) => {changeNUmberOfPaths(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"number of paths\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          <form onSubmit={(e) => handleSubmit(e, connections.processed_data)}  >\r\n                <Button \r\n                   type=\"submit\" value=\"Submit\" variant=\"outlined\"\r\n                icon={<SendIcon/>} >submit\r\n                 </Button>\r\n            </form>\r\n         \r\n            </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {connections: state.connections}\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Search);","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\HomeChar.js",["105"],"import {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import SimpleBottomNavigation from '../components/navigationBar'\r\n  import Box from '@material-ui/core/Box';\r\n  import {connect} from 'react-redux';\r\n  import hardesNumbers from '../jsons/hardesNumbers'\r\n  import {homePageAlgo} from '../Algorithms/homePageAlgo'\r\n  import {fetchConnections, setProcessedConnections} from '../actions'\r\n  import {MakeGraph} from '../Algorithms/makeGraph'\r\n  import erdesP from '../components/erdesP.jpg';\r\n  import backgroundImage from '../components/background.jpg';\r\n  \r\n\r\n  const data = homePageAlgo(hardesNumbers);\r\n  const HomeChar = ({connections, fetchConnections, setProcessedConnections}) =>\r\n  {\r\n    const getProcessedConnections = (rawData) => {\r\n      console.log(rawData);\r\n      setProcessedConnections(MakeGraph(rawData));\r\n    }\r\n    \r\n\r\n    console.log(connections);\r\n    if(!connections.rawData){\r\n      console.log(\"In FETCH\");\r\n      fetchConnections((rawData) => getProcessedConnections(rawData));\r\n    }\r\n    return (  \r\n      <div className=\"App\">\r\n\r\n          <SimpleBottomNavigation  />\r\n          <div className=\"photo\" style={{\r\n                  textAlign: 'right',\r\n                  marginRight: '75%',\r\n                  position: 'relative'  \r\n          }} >\r\n          <img src={erdesP} alt=\"erdesP\" />\r\n          </div>\r\n          <div style={{\r\n                  textAlign: 'right',\r\n                  marginRight: '16%',\r\n                  position: 'relative'  \r\n          }}>\r\n            \r\n          <Box component=\"div\" visibility=\"visible\" letterSpacing={1} >\r\n             .פאול ארדש (26.3.1913 - 20.9.1996) היה מתמטיקאי יהודי יליד הונגריה <br />\r\n             ,פאול היה ידוע בשיתופי הפעולה הרבים שלו, כאשר פרסם בערך כ-1500 מאמרים במשך חייו <br />\r\n             .לארדש לא היה מקום מגורים קבוע, והוא נדד ממקום למקום כדי לעבוד עם מתמטיקאים אחרים <br />\r\n             .מספר שיתופי הפעולה יוצאי הדופן שלו הביא ליצירת מספרי ארדש <br />\r\n             .עיקר תרומתו של ארדש היא לתורת המספרים ולמתמטיקה בדידה , כאשר הוא פרסם מאות מאמרים בנושאי קומבינטוריקה ותורת הגרפים <br />\r\n          </Box>\r\n          <br /><br />\r\n          <Box component=\"div\" visibility=\"visible\" letterSpacing={1}>\r\n            ,ארדש נחשב למתמטיקאי הפורה ביותר בהיסטוריה מבחינת מספר המאמרים שפרסם<br />\r\n            ,\"מסיבה זו, הוא הפך בסביבה המתמטית לנקודת מוקד במה שמכונה \"גרף המאמרים <br />\r\n            ,\"כלומר, מחברים שפרסמו מאמר עם ארד נחשבים בעלי \"מספר ארדש 1 <br />\r\n            .\"אלו שלא פרסמו מאמר עם ארדש עצמו אבל פרסמו מאמר עם מתמטיקאי שכן עשה זאת  הם בעלי \"מספר ארדש 2 <br />\r\n          </Box>\r\n          </div>\r\n        <div style={{\r\n              position: 'relative',\r\n              transform: 'translate(-50%, -50%)',\r\n              marginLeft: '50%',\r\n              marginTop: \"20%\", \r\n              textAlign: 'right'\r\n              \r\n              \r\n          }}>\r\n          <header className=\"Chart\">\r\n              <LineChart\r\n                  width={1000}\r\n                  height={500}\r\n                  data={data}\r\n                  margin={{\r\n                  top: 5, right: 30, left: 20, bottom: 5,\r\n                  }}\r\n              >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" label={{value: \"Erdos Number\", fontSize: 18, offset:-5 , position: \"insideBottom\"}}/>\r\n                  <YAxis dataKey=\"Number Of Authors\" label={{value: \"Number Of Authors\", angle: -90, fontSize: 18, offset:15 , position: \"left\"}}/>\r\n                  <Tooltip />\r\n                  <Legend verticalAlign= {\"middle\"}/>\r\n                  <Line type=\"monotone\"  dataKey=\"Number Of Authors\" stroke=\"#000000\" />\r\n              </LineChart>\r\n              </header>\r\n        </div>  \r\n          \r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  function mapStateToProps(state) {\r\n    return {connections: state.connections}\r\n  }\r\n\r\n  export default connect(mapStateToProps, {fetchConnections, setProcessedConnections})(HomeChar);","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\navigationBar.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\homePageAlgo.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\ConnectionsReducer.js",["106"],"import {FETCH_CONNECTIONS, GET_PROCESSED_CONNECTIONS} from '../actions'\r\n\r\nlet initialState = {rawData: null, processed_data: null}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_CONNECTIONS:\r\n            return ({...state, rawData: action.payload.rawData})\r\n        case GET_PROCESSED_CONNECTIONS:\r\n            return ({...state, processed_data: action.payload.processed_data})\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\hardesNumbers.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\makeGraph.js",["107","108","109"],"import React, { useState, useEffect } from 'react'\r\nexport const MakeGraph  = (erdesAdj) => {\r\n\r\n    console.log(\"IN MAKE GRAPH\");\r\n\r\n    const transfer = (g) => {\r\n        for (var name in erdesAdj){\r\n          for (var adj in erdesAdj[name][\"coauthors\"])\r\n            g.setEdge(name, adj , 1);\r\n        }\r\n        return g\r\n    }\r\n    \r\n    const graphlib = require('graphlib');\r\n    let graph = new graphlib.Graph(); // TODO : remove it from here so it would happen before submit\r\n    var g = transfer(graph)\r\n    console.log(\"FINISHED\");\r\n    console.log(g);\r\n    return g;   \r\n  \r\n    \r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\actions\\index.js",[],["110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":7,"column":1,"nodeType":"122","endLine":11,"endColumn":2},{"ruleId":"116","severity":1,"message":"123","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":13},{"ruleId":"116","severity":1,"message":"124","line":7,"column":12,"nodeType":"118","messageId":"119","endLine":7,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":8,"column":10,"nodeType":"118","messageId":"119","endLine":8,"endColumn":25},{"ruleId":"116","severity":1,"message":"125","line":4,"column":10,"nodeType":"118","messageId":"119","endLine":4,"endColumn":19},{"ruleId":"116","severity":1,"message":"117","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":25},{"ruleId":"116","severity":1,"message":"126","line":17,"column":15,"nodeType":"118","messageId":"119","endLine":17,"endColumn":20},{"ruleId":"116","severity":1,"message":"127","line":17,"column":22,"nodeType":"118","messageId":"119","endLine":17,"endColumn":27},{"ruleId":"128","severity":1,"message":"129","line":53,"column":32,"nodeType":"130","messageId":"131","endLine":53,"endColumn":34},{"ruleId":"128","severity":1,"message":"129","line":55,"column":30,"nodeType":"130","messageId":"131","endLine":55,"endColumn":32},{"ruleId":"132","severity":1,"message":"133","line":59,"column":19,"nodeType":"118","messageId":"134","endLine":59,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":71,"column":19,"nodeType":"118","messageId":"134","endLine":71,"endColumn":23},{"ruleId":"128","severity":1,"message":"129","line":84,"column":46,"nodeType":"130","messageId":"131","endLine":84,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":87,"column":46,"nodeType":"130","messageId":"131","endLine":87,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":138,"column":13,"nodeType":"137","endLine":148,"endColumn":2},{"ruleId":"135","severity":1,"message":"138","line":148,"column":3,"nodeType":"139","endLine":148,"endColumn":10,"suggestions":"140"},{"ruleId":"116","severity":1,"message":"126","line":16,"column":13,"nodeType":"118","messageId":"119","endLine":16,"endColumn":18},{"ruleId":"116","severity":1,"message":"127","line":16,"column":20,"nodeType":"118","messageId":"119","endLine":16,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":50,"column":32,"nodeType":"130","messageId":"131","endLine":50,"endColumn":34},{"ruleId":"128","severity":1,"message":"129","line":52,"column":30,"nodeType":"130","messageId":"131","endLine":52,"endColumn":32},{"ruleId":"132","severity":1,"message":"133","line":56,"column":19,"nodeType":"118","messageId":"134","endLine":56,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":68,"column":19,"nodeType":"118","messageId":"134","endLine":68,"endColumn":23},{"ruleId":"128","severity":1,"message":"129","line":81,"column":46,"nodeType":"130","messageId":"131","endLine":81,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":84,"column":46,"nodeType":"130","messageId":"131","endLine":84,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":133,"column":13,"nodeType":"137","endLine":143,"endColumn":2},{"ruleId":"135","severity":1,"message":"138","line":143,"column":3,"nodeType":"139","endLine":143,"endColumn":10,"suggestions":"141"},{"ruleId":"116","severity":1,"message":"117","line":12,"column":10,"nodeType":"118","messageId":"119","endLine":12,"endColumn":25},{"ruleId":"120","severity":1,"message":"142","line":5,"column":1,"nodeType":"122","endLine":14,"endColumn":2},{"ruleId":"116","severity":1,"message":"143","line":1,"column":8,"nodeType":"118","messageId":"119","endLine":1,"endColumn":13},{"ruleId":"116","severity":1,"message":"144","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"145","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"112","replacedBy":"146"},{"ruleId":"114","replacedBy":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'backgroundImage' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Box' is defined but never used.","'typography' is defined but never used.","'MakeGraph' is defined but never used.","'nodes' is assigned a value but never used.","'edges' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'node' is already defined.","redeclared","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'isSubmmited'. Either include it or remove the dependency array.","ArrayExpression",["150"],["151"],"Unexpected default export of anonymous function","'React' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["148"],["149"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},"Update the dependencies array to be: [graph, isSubmmited]",{"range":"155","text":"156"},{"range":"157","text":"156"},[4085,4092],"[graph, isSubmmited]",[3819,3826]]