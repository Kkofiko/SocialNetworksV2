[{"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\index.js":"1","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\App.js":"2","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reportWebVitals.js":"3","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Root.js":"4","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\Navbar.js":"5","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\connections.js":"6","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\statistics.js":"7","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\index.js":"8","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\search.js":"9","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\HomeChar.js":"10","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\navigationBar.js":"11","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\homePageAlgo.js":"12","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\ConnectionsReducer.js":"13","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\hardesNumbers.js":"14","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\makeGraph.js":"15","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\actions\\index.js":"16","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\publications_dict.js":"17","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\getLinks.js":"18","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\StatisticsReducer.js":"19","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\authors_to_publication.js":"20"},{"size":522,"mtime":1609750961413,"results":"21","hashOfConfig":"22"},{"size":368,"mtime":1610189484405,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":437,"mtime":1609750961412,"results":"25","hashOfConfig":"22"},{"size":575,"mtime":1610266807518,"results":"26","hashOfConfig":"22"},{"size":3758,"mtime":1610271501734,"results":"27","hashOfConfig":"22"},{"size":8541,"mtime":1610270311869,"results":"28","hashOfConfig":"22"},{"size":258,"mtime":1610196324055,"results":"29","hashOfConfig":"22"},{"size":7838,"mtime":1610472010447,"results":"30","hashOfConfig":"22"},{"size":4651,"mtime":1610265044270,"results":"31","hashOfConfig":"22"},{"size":1531,"mtime":1610266847394,"results":"32","hashOfConfig":"22"},{"size":506,"mtime":1609759152819,"results":"33","hashOfConfig":"22"},{"size":521,"mtime":1610196659052,"results":"34","hashOfConfig":"22"},{"size":69,"mtime":1610269881357,"results":"35","hashOfConfig":"22"},{"size":531,"mtime":1610181370520,"results":"36","hashOfConfig":"22"},{"size":976,"mtime":1610196740517,"results":"37","hashOfConfig":"22"},{"size":127370,"mtime":1610182818235,"results":"38","hashOfConfig":"22"},{"size":688,"mtime":1610194315661,"results":"39","hashOfConfig":"22"},{"size":406,"mtime":1610197086214,"results":"40","hashOfConfig":"22"},{"size":133945,"mtime":1610196911178,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1luwyyv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\index.js",[],["94","95"],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\App.js",["96"],"import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport backgroundImage from './components/background.jpg';\nfunction App() {\n  return (\n    <div >\n    <BrowserRouter >\n    \n      <div className='start'  >\n       <Navbar />   \n      </div>\n    </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reportWebVitals.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Root.js",["97"],"import React from 'react';\r\nimport reduxThunk from 'redux-thunk';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport reducers from './reducers'\r\n\r\nexport default ({ children, initialState = {} }) => {\r\n    const createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\r\n\r\n    return <Provider store={createStoreWithMiddleware(reducers, initialState)}>{children}</Provider>\r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\Navbar.js",["98"],"import HomeChar from '../pages/HomeChar'\r\nimport search from '../pages/search'\r\nimport conncetions from '../pages/connections'\r\nimport statistics from '../pages/statistics' \r\nimport { Route } from 'react-router-dom';\r\nconst Navbar = () => {\r\n    return (\r\n\r\n             <div className=\"Routes\">\r\n                <Route exact path='/' component={HomeChar} />\r\n                <Route exact path='/search' component={search} />\r\n                <Route exact path='/connections' component={statistics} />\r\n                \r\n            </div>\r\n\r\n    )\r\n}\r\nexport default Navbar;","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\connections.js",["99","100"],"import {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import SimpleBottomNavigation from '../components/navigationBar'\r\n  // import hardesNumbers from '../jsons/hardesNumbers'\r\n  import { publDict } from '../jsons/publications_dict';\r\n  import { authors_to_publication } from '../jsons/authors_to_publication';\r\n  // import { ardashNumbers } from '../../public/ardash_numbersers';\r\n  import {connect} from 'react-redux';\r\n  \r\n  const connections = (fetchStats, stats) =>\r\n  { \r\n  const author_age  = (author) => {\r\n    var articals_id = authors_to_publication[author] //array of this author artical id\r\n    var age = 0; //minimal age\r\n    for (var artical in articals_id){ //go over all artical\r\n      var artical_id = articals_id[artical];\r\n      if (publDict[artical_id] != undefined){\r\n        var date = publDict[artical_id]['year'] //string of date\r\n        var age_of_artical = 2020 - date \r\n        // console.log(age_of_artical)\r\n        if(age_of_artical > age){\r\n          age = age_of_artical\r\n        }\r\n      }\r\n    }\r\n    return age;\r\n  } \r\n  \r\n  const number_of_articals = (author) => {\r\n      if( authors_to_publication[author] != undefined)\r\n        return authors_to_publication[author].length\r\n      else{\r\n         return 0\r\n      }\r\n    }\r\n//   const ardashNumbers = (author) => (ardashNumbers[author])\r\n  \r\n  \r\n  \r\n  const avrage_articals_per_age = (age) => {  \r\n      var counter = 0;\r\n      var accum = 0; \r\n      for(var author in authors_to_publication){\r\n        var author_name = authors_to_publication[author]\r\n        if(author_age(author_name) === age){\r\n              counter = counter + 1;\r\n              accum = accum + number_of_articals(author_name)\r\n        }\r\n      }\r\n       return (accum/counter)\r\n  }\r\n//  const avarge_erdos_num_per_age = (age) => {\r\n//    var counter = 0;\r\n//    var accum = 0;\r\n//    for(var author in authors_to_publication){\r\n//         var author_name = authors_to_publication[author]\r\n//         if(author_age(author_name) === age){\r\n//               counter = counter + 1;\r\n//               accum = accum + ardashNumbers(author_name)\r\n//         }\r\n//   }\r\nconst make_data_avarge_artricals = () => {\r\n var the_Data = [];\r\n var i = 0;\r\n while(i < 70){\r\n    the_Data.push({name: i, uv: avrage_articals_per_age(i)})\r\n\r\n}\r\nreturn the_Data\r\n}\r\n// const make_data_avarge_erdos_num = () => {\r\n//  var the_Data = [];\r\n//  var i = 0;\r\n//  while(i < 6){\r\n//  data.push({name: i, uv: avarge_erdos_num_per_age(i)})\r\n\r\n// }\r\n// return the_Data\r\n// }\r\n  const data = make_data_avarge_artricals();\r\n    \r\n    return (\r\n      <div className=\"App\" >\r\n          <SimpleBottomNavigation  />\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '50%',\r\n              transform: 'translate(-50%, -50%)',\r\n\r\n          }}>\r\n        \r\n            <header className=\"Chart\">\r\n                <LineChart\r\n                    width={1000}\r\n                    height={500}\r\n                    data={data}\r\n                    margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\"  />\r\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n                </header>\r\n          </div>  \r\n     </div>\r\n    );\r\n  }\r\n  \r\n\r\n  function mapStateToProps(state) {\r\n    return {stats: state.stats}\r\n  \r\n  }\r\n  export default connect(mapStateToProps, {})(connections);","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\statistics.js",["101","102","103","104","105","106","107","108","109","110","111","112","113","114"],"  import SimpleBottomNavigation from '../components/navigationBar'\r\n  import React, { useState, useEffect } from 'react'\r\n  import Graph from \"react-graph-vis\";\r\n  import { CommonLoading } from 'react-loadingg';\r\n  import {connect} from 'react-redux';\r\n  import TextField from '@material-ui/core/TextField';\r\n  import Autocomplete from '@material-ui/lab/Autocomplete';\r\n  import SendIcon from '@material-ui/icons/Send'; \r\n  import Button from '@material-ui/core/Button'; \r\n  import { getLinks } from '../Algorithms/getLinks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n  const EmptyGraph = {nodes: [],  edges: []};\r\n  const Statistics = ({connections}) =>{\r\n    const events = {\r\n      selectEdge: function(event) {\r\n        var Sedges = event['edges'][0];\r\n        var fromnode;\r\n        var tonode;\r\n        for (var edge in graph['edges']){\r\n          if (graph['edges'][edge]['id'] == Sedges){\r\n            fromnode = graph['edges'][edge]['from']\r\n            tonode = graph['edges'][edge]['to']\r\n          }\r\n        }\r\n        for (var node in graph['nodes']){\r\n          if (graph['nodes'][node]['id'] == fromnode){\r\n            fromnode = graph['nodes'][node]['label']\r\n          }\r\n          if (graph['nodes'][node]['id'] == tonode){\r\n            tonode = graph['nodes'][node]['label']\r\n          }\r\n        }\r\n  \r\n        setLinks(getLinks(tonode, fromnode));\r\n  \r\n      }\r\n    };\r\n    \r\n  const options = {\r\n    layout: {\r\n      improvedLayout: true\r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n    width: \"1000px\"\r\n  };\r\n  const changeVal = (change, value) => {\r\n    if (change === \"start\")\r\n      setStart(value);\r\n    else\r\n      setFinish(value);\r\n  }\r\n\r\n  const changeNUmberOfPaths = (num) =>{\r\n    setNumOfpaths(num);\r\n  } \r\n\r\n  const convert = (paths) => {\r\n    var nodesList = [];\r\n    var nodes = [];\r\n    var edges = [];\r\n    var i = 0;    \r\n    for(var path in paths){\r\n      for (var node in paths[path][\"edges\"]){\r\n        var edge = paths[path][\"edges\"][node]\r\n        var autFrom = false\r\n        var autTo = false\r\n        for (var v in nodesList){\r\n          if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n            autFrom = true\r\n          if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n            autTo = true\r\n        }\r\n        if (!autFrom){\r\n              var node =  edge[\"fromNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n          \r\n              if(edge[\"fromNode\"] === start){\r\n                nodes.push({id: i, label: edge[\"fromNode\"], color:{background:'#8096E3'}});\r\n              }\r\n              else{\r\n                nodes.push({id: i, label: edge[\"fromNode\"]});\r\n              }\r\n              i++\r\n        }\r\n        if (!autTo){\r\n              var node =  edge[\"toNode\"]\r\n            \r\n                nodesList.push( {name: node, id : i} )\r\n                if(edge[\"toNode\"] === finish){\r\n                  nodes.push({id: i, label: edge[\"toNode\"], color:{background:'#9BDCDC'}});\r\n  \r\n                }\r\n                else{\r\n                  nodes.push({id: i, label: edge[\"toNode\"]});\r\n                }\r\n              i++\r\n        }\r\n        for ( var nodeinNodes in nodesList){\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n            var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n            var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n        }      \r\n  \r\n        edges.push({from: edgeFrom, to: edgeTo});\r\n       \r\n      }\r\n    }\r\n    return {\r\n      nodes: nodes,\r\n      edges: edges\r\n    }\r\n  }\r\nconst [start, setStart] = useState(\"\");\r\nconst [finish, setFinish] = useState(\"\");\r\nconst [numOfPaths,setNumOfpaths] = useState(1);\r\nconst [isSubmmited ,setIsSubmmited] = useState(false)\r\nconst [loading ,setLoading] = useState(false)\r\nconst [graph, setGraph] = useState(EmptyGraph)\r\nconst [Links, setLinks] = useState([])\r\n\r\n\r\n\r\nconst lower_upper_case = (str) => {\r\n  console.log(str);\r\n   var words = str.split(\" \");\r\n   var ans = \"\"\r\n   for(var word in words){\r\n    ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n   }\r\n   ans = ans.substring(0, ans.length-1)\r\n  return ans;\r\n}\r\n\r\nconst valid_input = (name) =>{\r\n  for(var v in connections.rawData){\r\n    if(name === v){\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nconst getNames = (data) => {\r\n  var val = [];\r\n  for(var v in data){\r\n    val.push(v)\r\n  }\r\n  return val\r\n}\r\n\r\nuseEffect ( async () => {\r\n  console.log(isSubmmited);\r\n  console.log(graph)\r\n  if (graph === EmptyGraph)\r\n    setIsSubmmited(false);\r\n  else {\r\n    setIsSubmmited(true);\r\n    setLoading(false)\r\n  }\r\n  console.log(isSubmmited);\r\n},[graph]);\r\n\r\n\r\nconst optionss = getNames(connections.rawData);\r\n\r\n  const handleSubmit = async  (e, graph) => {\r\n    setLoading(true); \r\n    setGraph(EmptyGraph)\r\n    e.preventDefault();\r\n    const ksp = require('k-shortest-path')\r\n    var name1 =  lower_upper_case(start);\r\n    var name2 =  lower_upper_case(finish);\r\n    if (!valid_input(name1)){\r\n      alert(\"the name: \" + name1 + \" wasn't found\")\r\n      return;\r\n    }\r\n    if(!valid_input(name2)){\r\n     alert(\"the name: \" + name2 + \" wasn't found\")\r\n     return;\r\n    }\r\n    setTimeout(()=> {\r\n      var path = ksp.ksp(graph, name1, name2, numOfPaths)\r\n      var changed_graph = convert(path);\r\n      setGraph(changed_graph);\r\n    },500)\r\n    \r\n\r\n  } \r\n\r\n return (\r\n    \r\n    <div className=\"search\"  >\r\n          <SimpleBottomNavigation  />\r\n          {loading && <CommonLoading />}\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '48%',\r\n              transform: 'translate(-50%, -50%)',\r\n          }}>\r\n\r\n              { isSubmmited && <Graph\r\n                graph={graph}\r\n                options={options}\r\n                events={events}/>}\r\n\r\n          </div> \r\n                \r\n      \r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '92%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={optionss.sort((a, b) => -b[0].localeCompare(a[0]))}\r\n            getOptionLabel={(option) => option}\r\n            groupBy={(option) => option[0]}\r\n            style={{ width: 300 }}\r\n            onChange={(e, value) => {changeVal(\"start\",value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author from\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n           <Autocomplete\r\n            id=\"combo-box-demo1\"\r\n            options={optionss.sort((a, b) => -b[0].localeCompare(a[0]))}\r\n            getOptionLabel={(option) => option}\r\n            groupBy={(option) => option[0]}\r\n            style={{ width: 300 }}\r\n            onChange={(e,value) => changeVal(\"finish\",value)}\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author to\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          *it takes ~15 seconds to find one path\r\n          <br />\r\n            <Autocomplete\r\n            id=\"combo-box-demo2\"\r\n            options={[1,2,3,4,5,6,7,8]}\r\n            getOptionLabel={(option) => option.toString()}\r\n            style={{ width: 300, marginTop: '2%' }}\r\n            onChange={(e, value) => {changeNUmberOfPaths(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"number of paths\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          <form onSubmit={(e) => handleSubmit(e, connections.processed_data)}  >\r\n                <Button \r\n                   type=\"submit\" value=\"Submit\" variant=\"outlined\"\r\n                icon={<SendIcon/>} >submit\r\n                 </Button>\r\n            </form>\r\n         \r\n            </div>\r\n\r\n            <div style={{\r\n              position: 'absolute', left: '20%', top: '20%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n          { Links.length ? (Links.map( (link) => \r\n          <p> articles : {Array.isArray(link.Links) ? \r\n            \r\n            (link.Links.map( (lik) => \r\n             <a target=\"_blank\" href={lik}>{link.title} <br/></a> \r\n            )) \r\n            : <a target=\"_blank\" href={link.Links}>{link.title}</a>} <br/></p>  )\r\n          ) : \"\" }\r\n          </div>\r\n\r\n         \r\n     </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {connections: state.connections}\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Statistics);","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\index.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\search.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React, { useState, useEffect } from 'react'\r\nimport { Linking } from 'react';\r\nimport SimpleBottomNavigation from '../components/navigationBar'\r\nimport Graph from \"react-graph-vis\";\r\nimport {connect} from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SendIcon from '@material-ui/icons/Send'; \r\nimport Button from '@material-ui/core/Button'; \r\nimport { CommonLoading } from 'react-loadingg';\r\nimport { getLinks } from '../Algorithms/getLinks'\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst EmptyGraph = {nodes: [],  edges: []};\r\nconst EmptyLinks = [];\r\n\r\nconst Search = ({connections}) =>{\r\n  const events = {\r\n    selectEdge: function(event) {\r\n      setLinks(EmptyLinks)\r\n      var Sedges = event['edges'][0];\r\n      var fromnode;\r\n      var tonode;\r\n      for (var edge in graph['edges']){\r\n        if (graph['edges'][edge]['id'] == Sedges){\r\n          fromnode = graph['edges'][edge]['from']\r\n          tonode = graph['edges'][edge]['to']\r\n        }\r\n      }\r\n      for (var node in graph['nodes']){\r\n        if (graph['nodes'][node]['id'] == fromnode){\r\n          fromnode = graph['nodes'][node]['label']\r\n        }\r\n        if (graph['nodes'][node]['id'] == tonode){\r\n          tonode = graph['nodes'][node]['label']\r\n        }\r\n      }\r\n      console.log(getLinks(tonode, fromnode))\r\n      setLinks(getLinks(tonode, fromnode));\r\n\r\n    }\r\n    \r\n  };\r\n  const options = {\r\n    layout: {\r\n      improvedLayout: true\r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n    width: \"1000px\"\r\n  };\r\n  const changeVal = (value) => {\r\n     setValue(value);\r\n  }\r\n  const changeNUmberOfPaths = (num) =>{\r\n    setNumOfpaths(num);\r\n  } \r\n  const convert = (paths) => {\r\n    var nodesList = [];\r\n    var nodes = [];\r\n    var edges = [];\r\n    var i = 0;    \r\n    for(var path in paths){\r\n      for (var node in paths[path][\"edges\"]){\r\n        var edge = paths[path][\"edges\"][node]\r\n        var autFrom = false\r\n        var autTo = false\r\n        for (var v in nodesList){\r\n          if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n            autFrom = true\r\n          if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n            autTo = true\r\n        }\r\n        if (!autFrom){\r\n              var node =  edge[\"fromNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n          \r\n              if(edge[\"fromNode\"] === \"Paul Erd\\u00f6s\"){\r\n                nodes.push({id: i, label: edge[\"fromNode\"], color:{background:'#8096E3'}});\r\n              }\r\n              else{\r\n                nodes.push({id: i, label: edge[\"fromNode\"]});\r\n              }\r\n              i++\r\n        }\r\n        if (!autTo){\r\n              var node =  edge[\"toNode\"]\r\n            \r\n                nodesList.push( {name: node, id : i} )\r\n                if(edge[\"toNode\"] === value){\r\n                  nodes.push({id: i, label: edge[\"toNode\"], color:{background:'#9BDCDC'}});\r\n  \r\n                }\r\n                else{\r\n                  nodes.push({id: i, label: edge[\"toNode\"]});\r\n                }\r\n              i++\r\n        }\r\n        for ( var nodeinNodes in nodesList){\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n            var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n            var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n        }      \r\n  \r\n        edges.push({from: edgeFrom, to: edgeTo});\r\n       \r\n      }\r\n    }\r\n    return {\r\n      nodes: nodes,\r\n      edges: edges\r\n    }\r\n  }\r\n\r\nconst [value, setValue] = useState(\"\");\r\nconst [numOfPaths,setNumOfpaths] = useState(1);\r\nconst [isSubmmited ,setIsSubmmited] = useState(false)\r\nconst [loading ,setLoading] = useState(false)\r\nconst [graph, setGraph] = useState(EmptyGraph)\r\nconst [Links, setLinks] = useState(EmptyLinks)\r\n\r\nconst lower_upper_case = (str) => {\r\n   var words = str.split(\" \");\r\n   var ans = \"\"\r\n   for(var word in words){\r\n    ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n   }\r\n   ans = ans.substring(0, ans.length-1)\r\n  return ans;\r\n}\r\nconst valid_input = (name) =>{\r\n  for(var v in connections.rawData){\r\n    if(name === v){\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\nconst getNames = (data) => {\r\n  var val = [];\r\n  for(var v in data){\r\n    val.push(v)\r\n  }\r\n  return val\r\n}\r\nuseEffect ( async () => {\r\n\r\n\r\n  if (graph === EmptyGraph)\r\n    setIsSubmmited(false);\r\n  else {\r\n    setIsSubmmited(true);\r\n    setLoading(false)\r\n  }\r\n\r\n},[graph]);\r\nconst optionss = getNames(connections.rawData);  \r\nconst handleSubmit = async  (e, graph) => {\r\n    setLoading(true); \r\n    setGraph(EmptyGraph)\r\n    e.preventDefault();\r\n    const ksp = require('k-shortest-path')\r\n    var name =  lower_upper_case(value);\r\n    if (!valid_input(name)){\r\n     alert(\"the name: \" + name + \" wasn't found\")\r\n     return;\r\n    }\r\n    setTimeout(()=> {\r\n      console.log(\"started algo\")\r\n      var path = ksp.ksp(graph, \"Paul Erd\\u00f6s\", lower_upper_case(value), numOfPaths)\r\n      console.log(\"ended\")\r\n      var changed_graph = convert(path);\r\n      setGraph(changed_graph);\r\n    },500)\r\n  } \r\n\r\n return (\r\n    \r\n    <div className=\"search\"  >\r\n          <SimpleBottomNavigation  />\r\n          {loading && <CommonLoading />}\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '48%',\r\n              transform: 'translate(-50%, -50%)',\r\n          }}>\r\n\r\n              { isSubmmited && <Graph\r\n                graph={graph}\r\n                options={options}\r\n                events={events}/>}\r\n\r\n          </div> \r\n                \r\n      \r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '92%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={optionss.sort((a, b) => -b[0].localeCompare(a[0]))}\r\n            getOptionLabel={(option) => option}\r\n            groupBy={(option) => option[0]}\r\n            style={{ width: 300 }}\r\n            onChange={(e, value) => {changeVal(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"author name\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          *it takes ~15 seconds to find one path\r\n          <br />\r\n            <Autocomplete\r\n            id=\"combo-box-demo2\"\r\n            options={[1,2,3,4,5,6,7,8]}\r\n            getOptionLabel={(option) => option.toString()}\r\n            style={{ width: 300, marginTop: '2%' }}\r\n            onChange={(e, value) => {changeNUmberOfPaths(value)} }\r\n            renderInput={(params) => <TextField {...params} type=\"text\" label=\"number of paths\"\r\n            variant=\"outlined\"\r\n            />}\r\n          />\r\n          <form onSubmit={(e) => handleSubmit(e, connections.processed_data)}  >\r\n                <Button \r\n                   type=\"submit\" value=\"Submit\" variant=\"outlined\"\r\n                icon={<SendIcon/>} >submit\r\n                 </Button>\r\n            </form>\r\n         \r\n          </div>\r\n\r\n          <div style={{\r\n              position: 'absolute', left: '20%', top: '20%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n          { Links.length ? (Links.map( (link) => \r\n          <p> articles : {Array.isArray(link.Links) ? \r\n            \r\n            (link.Links.map( (lik) => \r\n             <a target=\"_blank\" href={lik}>{link.title} <br/></a> \r\n            )) \r\n            : <a target=\"_blank\" href={link.Links}>{link.title}</a>} <br/></p>  )\r\n          ) : \"\" }\r\n          </div>\r\n        \r\n          \r\n     </div>\r\n  );\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {connections: state.connections}\r\n\r\n}\r\nexport default connect(mapStateToProps, {})(Search);\r\n","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\pages\\HomeChar.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\components\\navigationBar.js",["129"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 700,\r\n  },\r\n});\r\n\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    let history = useHistory();\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  return (\r\n    <BottomNavigation style={{\r\n      \r\n        position: 'realtive', transform: 'translate(-50%, -50%)', marginLeft: '50%', marginTop:'5%'\r\n      }} \r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setValue(newValue);\r\n      }}\r\n      showLabels\r\n      className={classes.root}\r\n    >\r\n      <BottomNavigationAction onClick={() => history.push('/') } label=\"HOME-PAGE\" icon={<HomeIcon color=\"action\" />} />\r\n      <BottomNavigationAction onClick={() => history.push('/search')} label=\"connection to hardes\" icon={<SearchIcon />} />\r\n      <BottomNavigationAction onClick={() => history.push('/Connections')} label=\"Connection between two people\" icon={<SettingsInputComponentIcon />} />\r\n    </BottomNavigation>\r\n  );\r\n  \r\n}\r\n","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\homePageAlgo.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\ConnectionsReducer.js",["130"],"import {FETCH_CONNECTIONS, GET_PROCESSED_CONNECTIONS, PUT_DATA_FROM_LOCAL_STORAGE} from '../actions'\r\n\r\nlet initialState = {rawData: null, processed_data: null}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_CONNECTIONS:\r\n            return ({...state, rawData: action.payload.rawData})\r\n        case GET_PROCESSED_CONNECTIONS:\r\n            return ({...state, processed_data: action.payload.processed_data})\r\n        case PUT_DATA_FROM_LOCAL_STORAGE:\r\n            return ({...state,processed_data: action.payload.processedData, rawData: action.payload.rawData })\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\hardesNumbers.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\makeGraph.js",["131","132","133"],"import React, { useState, useEffect } from 'react'\r\nexport const MakeGraph  = (erdesAdj) => {\r\n\r\n    console.log(\"IN MAKE GRAPH\");\r\n\r\n    const transfer = (g) => {\r\n        for (var name in erdesAdj){\r\n          for (var adj in erdesAdj[name][\"coauthors\"])\r\n            g.setEdge(name, adj , 1);\r\n        }\r\n        return g\r\n    }\r\n    \r\n    const graphlib = require('graphlib');\r\n    let graph = new graphlib.Graph(); // TODO : remove it from here so it would happen before submit\r\n    var g = transfer(graph)\r\n    console.log(\"FINISHED\");\r\n    console.log(g);\r\n    return g;   \r\n  \r\n    \r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\actions\\index.js",[],["134","135"],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\publications_dict.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\Algorithms\\getLinks.js",["136"],"import { List } from '@material-ui/core';\r\nimport { publDict } from '../jsons/publications_dict';\r\n\r\n\r\nexport const getLinks = (toNode, fromNode) => {\r\n    var Links = []\r\n    for (var artc in publDict){\r\n        var authors =  publDict[artc]['author'];\r\n        if (Array.isArray(authors)){\r\n            if (authors.includes(toNode) && authors.includes(fromNode)){\r\n                console.log(\"MADE ITTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\")\r\n                Links.push({\r\n                    'title' : publDict[artc]['title'],\r\n                    'Links' :  publDict[artc]['ee']\r\n                }) \r\n                break;\r\n            }\r\n           \r\n        }\r\n\r\n    }\r\n    return Links;\r\n}","C:\\Users\\ofeer\\Desktop\\socialnet\\src\\reducers\\StatisticsReducer.js",[],"C:\\Users\\ofeer\\Desktop\\socialnet\\src\\jsons\\authors_to_publication.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":4,"column":8,"nodeType":"143","messageId":"144","endLine":4,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":7,"column":1,"nodeType":"147","endLine":11,"endColumn":2},{"ruleId":"141","severity":1,"message":"148","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":18,"column":32,"nodeType":"151","messageId":"152","endLine":18,"endColumn":34},{"ruleId":"149","severity":1,"message":"150","line":31,"column":42,"nodeType":"151","messageId":"152","endLine":31,"endColumn":44},{"ruleId":"141","severity":1,"message":"153","line":11,"column":10,"nodeType":"143","messageId":"144","endLine":11,"endColumn":14},{"ruleId":"149","severity":1,"message":"154","line":21,"column":42,"nodeType":"151","messageId":"152","endLine":21,"endColumn":44},{"ruleId":"149","severity":1,"message":"154","line":27,"column":42,"nodeType":"151","messageId":"152","endLine":27,"endColumn":44},{"ruleId":"149","severity":1,"message":"154","line":30,"column":42,"nodeType":"151","messageId":"152","endLine":30,"endColumn":44},{"ruleId":"149","severity":1,"message":"154","line":72,"column":32,"nodeType":"151","messageId":"152","endLine":72,"endColumn":34},{"ruleId":"149","severity":1,"message":"154","line":74,"column":30,"nodeType":"151","messageId":"152","endLine":74,"endColumn":32},{"ruleId":"155","severity":1,"message":"156","line":78,"column":19,"nodeType":"143","messageId":"157","endLine":78,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":90,"column":19,"nodeType":"143","messageId":"157","endLine":90,"endColumn":23},{"ruleId":"149","severity":1,"message":"154","line":103,"column":46,"nodeType":"151","messageId":"152","endLine":103,"endColumn":48},{"ruleId":"149","severity":1,"message":"154","line":106,"column":46,"nodeType":"151","messageId":"152","endLine":106,"endColumn":48},{"ruleId":"158","severity":1,"message":"159","line":158,"column":13,"nodeType":"160","endLine":168,"endColumn":2},{"ruleId":"158","severity":1,"message":"161","line":168,"column":3,"nodeType":"162","endLine":168,"endColumn":10,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":271,"column":17,"nodeType":"166","endLine":271,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":273,"column":18,"nodeType":"166","endLine":273,"endColumn":33},{"ruleId":"141","severity":1,"message":"167","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":17},{"ruleId":"141","severity":1,"message":"168","line":12,"column":10,"nodeType":"143","messageId":"144","endLine":12,"endColumn":15},{"ruleId":"149","severity":1,"message":"154","line":25,"column":40,"nodeType":"151","messageId":"152","endLine":25,"endColumn":42},{"ruleId":"149","severity":1,"message":"154","line":31,"column":40,"nodeType":"151","messageId":"152","endLine":31,"endColumn":42},{"ruleId":"149","severity":1,"message":"154","line":34,"column":40,"nodeType":"151","messageId":"152","endLine":34,"endColumn":42},{"ruleId":"149","severity":1,"message":"154","line":71,"column":32,"nodeType":"151","messageId":"152","endLine":71,"endColumn":34},{"ruleId":"149","severity":1,"message":"154","line":73,"column":30,"nodeType":"151","messageId":"152","endLine":73,"endColumn":32},{"ruleId":"155","severity":1,"message":"156","line":77,"column":19,"nodeType":"143","messageId":"157","endLine":77,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":89,"column":19,"nodeType":"143","messageId":"157","endLine":89,"endColumn":23},{"ruleId":"149","severity":1,"message":"154","line":102,"column":46,"nodeType":"151","messageId":"152","endLine":102,"endColumn":48},{"ruleId":"149","severity":1,"message":"154","line":105,"column":46,"nodeType":"151","messageId":"152","endLine":105,"endColumn":48},{"ruleId":"158","severity":1,"message":"159","line":151,"column":13,"nodeType":"160","endLine":161,"endColumn":2},{"ruleId":"164","severity":1,"message":"165","line":245,"column":17,"nodeType":"166","endLine":245,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":247,"column":18,"nodeType":"166","endLine":247,"endColumn":33},{"ruleId":"141","severity":1,"message":"169","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":21},{"ruleId":"145","severity":1,"message":"170","line":5,"column":1,"nodeType":"147","endLine":16,"endColumn":2},{"ruleId":"141","severity":1,"message":"171","line":1,"column":8,"nodeType":"143","messageId":"144","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"172","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"173","line":1,"column":27,"nodeType":"143","messageId":"144","endLine":1,"endColumn":36},{"ruleId":"137","replacedBy":"174"},{"ruleId":"139","replacedBy":"175"},{"ruleId":"141","severity":1,"message":"176","line":1,"column":10,"nodeType":"143","messageId":"144","endLine":1,"endColumn":14},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'backgroundImage' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'conncetions' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Link' is defined but never used.","Expected '===' and instead saw '=='.","no-redeclare","'node' is already defined.","redeclared","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'isSubmmited'. Either include it or remove the dependency array.","ArrayExpression",["179"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Linking' is defined but never used.","'Route' is defined but never used.","'EqualizerIcon' is defined but never used.","Unexpected default export of anonymous function","'React' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["177"],["178"],"'List' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},"Update the dependencies array to be: [graph, isSubmmited]",{"range":"182","text":"183"},[4727,4734],"[graph, isSubmmited]"]