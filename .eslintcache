[{"C:\\Users\\ofeer\\socialnet\\src\\index.js":"1","C:\\Users\\ofeer\\socialnet\\src\\App.js":"2","C:\\Users\\ofeer\\socialnet\\src\\reportWebVitals.js":"3","C:\\Users\\ofeer\\socialnet\\src\\components\\Navbar.js":"4","C:\\Users\\ofeer\\socialnet\\src\\pages\\HomeChar.js":"5","C:\\Users\\ofeer\\socialnet\\src\\pages\\connections.js":"6","C:\\Users\\ofeer\\socialnet\\src\\pages\\search.js":"7","C:\\Users\\ofeer\\socialnet\\src\\pages\\statistics.js":"8","C:\\Users\\ofeer\\socialnet\\src\\components\\navigationBar.js":"9","C:\\Users\\ofeer\\socialnet\\src\\Algorithms\\homePageAlgo.js":"10","C:\\Users\\ofeer\\socialnet\\src\\jsons\\erdesAdj.js":"11","C:\\Users\\ofeer\\socialnet\\src\\jsons\\hardesNumbers.js":"12","C:\\Users\\ofeer\\socialnet\\src\\Algorithms\\makeGraph.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":281,"mtime":1609150871623,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":651,"mtime":1609151021589,"results":"18","hashOfConfig":"15"},{"size":2068,"mtime":1609152817824,"results":"19","hashOfConfig":"15"},{"size":1679,"mtime":1609152803201,"results":"20","hashOfConfig":"15"},{"size":5220,"mtime":1609174757182,"results":"21","hashOfConfig":"15"},{"size":4843,"mtime":1609171534990,"results":"22","hashOfConfig":"15"},{"size":2133,"mtime":1609151019847,"results":"23","hashOfConfig":"15"},{"size":361,"mtime":1609152091668,"results":"24","hashOfConfig":"15"},{"size":33,"mtime":1609163726459,"results":"25","hashOfConfig":"15"},{"size":68,"mtime":1609152645738,"results":"26","hashOfConfig":"15"},{"size":767,"mtime":1609171526519,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"11q41f1",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"C:\\Users\\ofeer\\socialnet\\src\\index.js",[],["60","61"],"C:\\Users\\ofeer\\socialnet\\src\\App.js",[],"C:\\Users\\ofeer\\socialnet\\src\\reportWebVitals.js",[],"C:\\Users\\ofeer\\socialnet\\src\\components\\Navbar.js",[],"C:\\Users\\ofeer\\socialnet\\src\\pages\\HomeChar.js",[],"C:\\Users\\ofeer\\socialnet\\src\\pages\\connections.js",["62","63"],"import {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import SimpleBottomNavigation from '../components/navigationBar'\r\n  // import hardesNumbers from '../jsons/hardesNumbers'\r\n  import Box from '@material-ui/core/Box';\r\n  import { typography } from '@material-ui/system';\r\n  \r\n  var numbersCount = [0,0,0,0,0];\r\n  \r\n  \r\n  \r\n  const data = [\r\n    {\r\n      name: '1', uv: numbersCount[1]\r\n    },\r\n    {\r\n      name: '2', uv: numbersCount[2]\r\n    },\r\n    {\r\n      name: '3', uv: numbersCount[3]\r\n    },\r\n    {\r\n      name: '4', uv: numbersCount[4]\r\n    }\r\n  ];\r\n  const search = () =>\r\n  {\r\n    \r\n    return (\r\n      <div className=\"App\" >\r\n          <SimpleBottomNavigation  />\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '50%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n        \r\n            <header className=\"Chart\">\r\n                <LineChart\r\n                    width={1000}\r\n                    height={500}\r\n                    data={data}\r\n                    margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\"  />\r\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n                </header>\r\n          </div>  \r\n     </div>\r\n    );\r\n  }\r\n  \r\n  export default search;","C:\\Users\\ofeer\\socialnet\\src\\pages\\search.js",["64","65","66","67","68","69","70","71","72","73","74"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport SimpleBottomNavigation from '../components/navigationBar'\r\nimport Graph from \"react-graph-vis\";\r\n// import \"./styles.css\";\r\n\r\n\r\n\r\nconst Search = () =>{\r\n  const events = {\r\n    selectEdge: (event, id) => {\r\n      var { nodes, edges } = event;\r\n    //   if(edges.length == 1){ // just so it wont crash\r\n    //     let from = graph['edges'][edges]['from']\r\n    //     let to = graph['edges'][edges]['to']\r\n    //     let fromName1 = graph['nodes'].filter(node => node.id === from)\r\n    //     let fromName =fromName1[0]['label']\r\n    //     let toName1 = graph['nodes'].filter(node => node.id === to)\r\n    //     let toName = toName1[0]['label']\r\n    //     console.log(erdesAdj[fromName][toName]) //number of articels between the 2 nodes of the edge \r\n    //   }\r\n    },\r\n    selectNode: (event, id) => {\r\n      var { nodes, edges } = event;\r\n    //   console.log(graph['nodes'][nodes]) // u can reach the name of the node\r\n    }\r\n  };\r\n  \r\n  const options = {\r\n    layout: {\r\n      \r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n    width: \"600px\"\r\n  };\r\n  const changeVal = (value) => {\r\n     setValue(value);\r\n  }\r\n\r\n  const convert = (paths) => {\r\n    var nodesList = [];\r\n    var nodes = [];\r\n    var edges = [];\r\n    var i = 0;\r\n    let colors = [{color:'red'},{color:'green'},{color:'gold'}];\r\n    \r\n\r\n    for(var path in paths){\r\n\r\n      for (var node in paths[path][\"edges\"]){\r\n        var edge = paths[path][\"edges\"][node]\r\n        var autFrom = false\r\n        var autTo = false\r\n        for (var v in nodesList){\r\n          if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n            autFrom = true\r\n          if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n            autTo = true\r\n        }\r\n        if (!autFrom){\r\n              var node =  edge[\"fromNode\"]\r\n              nodesList.push( {name: node, id : i} )\r\n              nodes.push({id: i, label: edge[\"fromNode\"]});\r\n              i++\r\n        }\r\n        if (!autTo){\r\n              var node =  edge[\"toNode\"]\r\n              nodesList.push( {name: node, id : i} )\r\n              nodes.push({id: i, label: edge[\"toNode\"]});\r\n              i++\r\n        }\r\n        for ( var nodeinNodes in nodesList){\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n            var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n          if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n            var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n          }\r\n        }      \r\n  \r\n        edges.push({from: edgeFrom, to: edgeTo, color:colors[path], label: path.toString()});\r\n       \r\n      }\r\n        // if (colors['color'] === 'red'){\r\n        //     colors['color'] = 'green'\r\n        // }\r\n        // else if(colors['color'] === 'green'){\r\n        //   colors['color'] = 'gold'\r\n        // }\r\n        // else{\r\n        //   colors['color'] = 'blue'\r\n        // }   \r\n    }\r\n    \r\n    return {\r\n      nodes: nodes,\r\n      edges: edges\r\n    }\r\n  }\r\n\r\nconst [value, setValue] = useState(\"\");\r\nconst [isSubmmited ,setIsSubmmited] = useState(false)\r\nconst [graph, setGraph] = useState( { nodes: [],  edges: []})\r\nconst [erdesAdj, setErdesAdj] = useState(undefined)\r\n\r\n\r\nuseEffect ( async () => {\r\n\r\n            const data = await fetch(\"erdesAdj.js\");\r\n            console.log(!!data);\r\n            const jsondata = await data.json();\r\n            setErdesAdj(jsondata);\r\n\r\n        \r\n    }, []);\r\n\r\nconst transfer = (g) => {\r\n  \r\n  for (var name in erdesAdj){\r\n    for (var adj in erdesAdj[name][\"coauthors\"])\r\n      g.setEdge(name, adj , 1);\r\n  }\r\n}\r\n\r\nconst lower_upper_case = (str) => {\r\n   var words = str.split(\" \");\r\n   var ans = \"\"\r\n   for(var word in words){\r\n    ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n   }\r\n   ans = ans.substring(0, ans.length-1)\r\n  return ans;\r\n}\r\n\r\n \r\n  const handleSubmit = async  (e) => {\r\n    setIsSubmmited(false)\r\n    e.preventDefault();\r\n    const graphlib = require('graphlib');\r\n    let g = new graphlib.Graph();\r\n    transfer(g)\r\n    const ksp = require('k-shortest-path')\r\n\r\n    var path = ksp.ksp(g, \"Paul Erd\\u00f6s\", lower_upper_case(value), 4)\r\n    var changed_graph = convert(path);\r\n    await setGraph(changed_graph);\r\n    setIsSubmmited(true)\r\n    \r\n  }\r\n\r\n return (\r\n    \r\n<div className=\"App\" >\r\n          <SimpleBottomNavigation  />\r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '50%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n\r\n              {isSubmmited  && <Graph\r\n                graph={graph}\r\n                options={options}\r\n                events={events}/>}\r\n\r\n          </div> \r\n   \r\n      \r\n          <div style={{\r\n              position: 'absolute', left: '50%', top: '80%',\r\n              transform: 'translate(-50%, -50%)'\r\n          }}>\r\n          <form onSubmit={(e) => handleSubmit(e)} >\r\n              <label>\r\n                Name:\r\n                <input type=\"text\"  onChange={(e) => changeVal(e.target.value)} />\r\n              </label>\r\n              <input type=\"submit\" value=\"Submit\" />\r\n          </form> \r\n          </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default Search;","C:\\Users\\ofeer\\socialnet\\src\\pages\\statistics.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"import {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import SimpleBottomNavigation from '../components/navigationBar'\r\n  import React, { useState, useEffect } from 'react'\r\n  import Graph from \"react-graph-vis\";\r\n  import {MakeGraph} from '../Algorithms/makeGraph'  \r\n  \r\n  \r\n  const Statistics = () =>{\r\n    const events = {\r\n      select: function(event) {\r\n        var { nodes, edges } = event;\r\n      }\r\n    };\r\n    \r\n    const options = {\r\n      layout: {\r\n        improvedLayout: true\r\n      },\r\n      edges: {\r\n        color: \"#000000\"\r\n      },\r\n      height: \"500px\",\r\n      width: \"600px\"\r\n    };\r\n    \r\n  \r\n    \r\n    const convert = (paths) => {\r\n      var nodesList = [];\r\n      var nodes = [];\r\n      var edges = [];\r\n      var i = 0;\r\n      \r\n      for(var path in paths){\r\n        for (var node in paths[path][\"edges\"]){\r\n          var edge = paths[path][\"edges\"][node]\r\n          var autFrom = false\r\n          var autTo = false\r\n          for (var v in nodesList){\r\n            if (edge[\"fromNode\"] ==  nodesList[v][\"name\"])\r\n              autFrom = true\r\n            if (edge[\"toNode\"] == nodesList[v][\"name\"])\r\n              autTo = true\r\n          }\r\n          if (!autFrom){\r\n                var node =  edge[\"fromNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n                nodes.push({id: i, label: edge[\"fromNode\"]});\r\n                i++\r\n          }\r\n          if (!autTo){\r\n                var node =  edge[\"toNode\"]\r\n                nodesList.push( {name: node, id : i} )\r\n                nodes.push({id: i, label: edge[\"toNode\"]});\r\n                i++\r\n          }\r\n          for ( var nodeinNodes in nodesList){\r\n            if (nodesList[nodeinNodes][\"name\"] == edge[\"fromNode\"] ){\r\n              var edgeFrom = nodesList[nodeinNodes][\"id\"] \r\n            }\r\n            if (nodesList[nodeinNodes][\"name\"] == edge[\"toNode\"] ){\r\n              var edgeTo = nodesList[nodeinNodes][\"id\"] \r\n            }\r\n          }      \r\n          \r\n          edges.push({from: edgeFrom, to: edgeTo});\r\n        }   \r\n      }\r\n      \r\n      return {\r\n        nodes: nodes,\r\n        edges: edges\r\n      }\r\n    }\r\n    \r\n  \r\n  \r\n    const changeVal = (change, value) => {\r\n      if (change == \"start\")\r\n        setStart(value);\r\n      else\r\n        setFinish(value);\r\n    }\r\n    const [start, setStart] = useState(\"\");\r\n    const [finish, setFinish] = useState(\"\");\r\n    const [isSubmmited ,setIsSubmmited] = useState(false)\r\n    const [graph, setGraph] = useState( { nodes: [],  edges: []})\r\n    // const [erdesAdj, setErdesAdj] = useState(undefined)\r\n\r\n    // useEffect ( async () => {\r\n\r\n    //         const data = await fetch(\"erdesAdj.js\");\r\n    //         console.log(!!data);\r\n    //         const jsondata = await data.json();\r\n    //         setErdesAdj(jsondata);\r\n\r\n        \r\n    // }, []);\r\n  \r\n    // const transfer = (g) => {\r\n    //   for (var name in erdesAdj){\r\n    //     for (var adj in erdesAdj[name][\"coauthors\"])\r\n    //       g.setEdge(name, adj , 1);\r\n    //   }\r\n    // }\r\n\r\n    const lower_upper_case = (str) => {\r\n      var words = str.split(\" \");\r\n      var ans = \"\"\r\n      for(var word in words){\r\n       ans += words[word].charAt(0).toUpperCase() + (words[word].slice(1)) + \" \"\r\n      }\r\n      ans = ans.substring(0, ans.length-1)\r\n     return ans;\r\n   }\r\n  \r\n    const handleSubmit = async (e) => { \r\n      e.preventDefault();\r\n      setIsSubmmited(false)\r\n      var g = MakeGraph();\r\n      // const graphlib = require('graphlib');\r\n      // let g = new graphlib.Graph(); // TODO : remove it from here so it would happen before submit\r\n      // transfer(g)\r\n      const ksp = require('k-shortest-path')\r\n      var path = ksp.ksp(g, lower_upper_case(start), lower_upper_case(finish),3 )\r\n      await setGraph(convert(path));\r\n      setIsSubmmited(true)  \r\n  \r\n    }\r\n  \r\n    return (\r\n      \r\n     \r\n      <div className=\"App\" >\r\n      \r\n        \r\n        <SimpleBottomNavigation  />\r\n        <div style={{\r\n        position: 'absolute', left: '50%', top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }}> \r\n       {isSubmmited && <Graph\r\n        graph={graph}\r\n        options={options}\r\n        events={events}/>}\r\n            \r\n            <form onSubmit={(e) => {handleSubmit(e) }} >\r\n              <label>\r\n                  from:\r\n                  <input type=\"text\"  onChange={(e) => changeVal(\"start\", e.target.value)} />\r\n                <br/>\r\n                <br/>\r\n                  to:\r\n                  <input type=\"text\"  onChange={(e) => changeVal(\"finish\", e.target.value)} />\r\n                </label>\r\n                <br/>\r\n                <br/>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n        </div>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n  export default Statistics;\r\n  ","C:\\Users\\ofeer\\socialnet\\src\\components\\navigationBar.js",[],"C:\\Users\\ofeer\\socialnet\\src\\Algorithms\\homePageAlgo.js",[],"C:\\Users\\ofeer\\socialnet\\src\\jsons\\erdesAdj.js",[],"C:\\Users\\ofeer\\socialnet\\src\\jsons\\hardesNumbers.js",[],"C:\\Users\\ofeer\\socialnet\\src\\Algorithms\\makeGraph.js",["92","93"],"import React, { useState, useEffect } from 'react'\r\nexport const MakeGraph  = () => {\r\n\r\n    const [erdesAdj, setErdesAdj] = useState(undefined)\r\n\r\n    useEffect ( async () => {\r\n\r\n            const data = await fetch(\"erdesAdj.js\");\r\n            console.log(!!data);\r\n            const jsondata = await data.json();\r\n            setErdesAdj(jsondata);\r\n\r\n        \r\n    }, []);\r\n\r\n    const transfer = (g) => {\r\n        for (var name in erdesAdj){\r\n          for (var adj in erdesAdj[name][\"coauthors\"])\r\n            g.setEdge(name, adj , 1);\r\n        }\r\n    }\r\n\r\n    const graphlib = require('graphlib');\r\n    let graph = new graphlib.Graph(); // TODO : remove it from here so it would happen before submit\r\n    var g = transfer(graph)\r\n    return g;   \r\n  \r\n    \r\n}",["94","95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":6,"column":10,"nodeType":"102","messageId":"103","endLine":6,"endColumn":13},{"ruleId":"100","severity":1,"message":"104","line":7,"column":12,"nodeType":"102","messageId":"103","endLine":7,"endColumn":22},{"ruleId":"100","severity":1,"message":"105","line":12,"column":13,"nodeType":"102","messageId":"103","endLine":12,"endColumn":18},{"ruleId":"100","severity":1,"message":"106","line":12,"column":20,"nodeType":"102","messageId":"103","endLine":12,"endColumn":25},{"ruleId":"100","severity":1,"message":"105","line":24,"column":13,"nodeType":"102","messageId":"103","endLine":24,"endColumn":18},{"ruleId":"100","severity":1,"message":"106","line":24,"column":20,"nodeType":"102","messageId":"103","endLine":24,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":58,"column":32,"nodeType":"109","messageId":"110","endLine":58,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":60,"column":30,"nodeType":"109","messageId":"110","endLine":60,"endColumn":32},{"ruleId":"111","severity":1,"message":"112","line":64,"column":19,"nodeType":"102","messageId":"113","endLine":64,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":70,"column":19,"nodeType":"102","messageId":"113","endLine":70,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":76,"column":46,"nodeType":"109","messageId":"110","endLine":76,"endColumn":48},{"ruleId":"107","severity":1,"message":"108","line":79,"column":46,"nodeType":"109","messageId":"110","endLine":79,"endColumn":48},{"ruleId":"114","severity":1,"message":"115","line":110,"column":13,"nodeType":"116","endLine":118,"endColumn":6},{"ruleId":"100","severity":1,"message":"117","line":2,"column":5,"nodeType":"102","messageId":"103","endLine":2,"endColumn":14},{"ruleId":"100","severity":1,"message":"118","line":2,"column":16,"nodeType":"102","messageId":"103","endLine":2,"endColumn":20},{"ruleId":"100","severity":1,"message":"119","line":2,"column":22,"nodeType":"102","messageId":"103","endLine":2,"endColumn":27},{"ruleId":"100","severity":1,"message":"120","line":2,"column":29,"nodeType":"102","messageId":"103","endLine":2,"endColumn":34},{"ruleId":"100","severity":1,"message":"121","line":2,"column":36,"nodeType":"102","messageId":"103","endLine":2,"endColumn":49},{"ruleId":"100","severity":1,"message":"122","line":2,"column":51,"nodeType":"102","messageId":"103","endLine":2,"endColumn":58},{"ruleId":"100","severity":1,"message":"123","line":2,"column":60,"nodeType":"102","messageId":"103","endLine":2,"endColumn":66},{"ruleId":"100","severity":1,"message":"124","line":5,"column":29,"nodeType":"102","messageId":"103","endLine":5,"endColumn":38},{"ruleId":"100","severity":1,"message":"105","line":13,"column":15,"nodeType":"102","messageId":"103","endLine":13,"endColumn":20},{"ruleId":"100","severity":1,"message":"106","line":13,"column":22,"nodeType":"102","messageId":"103","endLine":13,"endColumn":27},{"ruleId":"107","severity":1,"message":"108","line":42,"column":34,"nodeType":"109","messageId":"110","endLine":42,"endColumn":36},{"ruleId":"107","severity":1,"message":"108","line":44,"column":32,"nodeType":"109","messageId":"110","endLine":44,"endColumn":34},{"ruleId":"111","severity":1,"message":"112","line":48,"column":21,"nodeType":"102","messageId":"113","endLine":48,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":54,"column":21,"nodeType":"102","messageId":"113","endLine":54,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":60,"column":48,"nodeType":"109","messageId":"110","endLine":60,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":63,"column":48,"nodeType":"109","messageId":"110","endLine":63,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":81,"column":18,"nodeType":"109","messageId":"110","endLine":81,"endColumn":20},{"ruleId":"100","severity":1,"message":"125","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":6,"column":17,"nodeType":"116","endLine":14,"endColumn":6},{"ruleId":"96","replacedBy":"126"},{"ruleId":"98","replacedBy":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'typography' is defined but never used.","'nodes' is assigned a value but never used.","'edges' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'node' is already defined.","redeclared","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'LineChart' is defined but never used.","'Line' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'CartesianGrid' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'useEffect' is defined but never used.","'React' is defined but never used.",["128"],["129"],"no-global-assign","no-unsafe-negation"]